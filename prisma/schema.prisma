// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma generate
// npx prisma db push

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String
  name     String
  status   Int
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  items       Item[]   @relation("ItemCategory")
}

model Unit {
  id           String   @id @default(uuid())
  name         String
  abbreviation String
  items        Item[]   @relation("ItemUnit")
}

model Item {
  id          String   @id @default(uuid())
  sku         String
  name        String
  description String
  category    Category @relation("ItemCategory", fields: [categoryId], references: [id])
  categoryId  String
  brand       String
  status      String
  unit        Unit     @relation("ItemUnit", fields: [unitId], references: [id])
  unitId      String
}

model Warehouse {
  id        String @id @default(uuid())
  code      String
  name      String
  location  String
  capacity  Int
  manager   String
  remarks   String
}

model Inventory {
  id            String   @id @default(uuid())
  itemId        String
  item          Item     @relation(fields: [itemId], references: [id])
  sku           String   @unique
  quantity      Int
  price         Float
  unitId        String
  warehouseId   String
  statusId      String // e.g. "active", "damaged", "old-stock"
  condition     String  // optional: "brand-new", "returned", "refurbished"
  createdAt     DateTime @default(now())
}

